description:
  repo: TD
  project_name: global
  experiment_name: test_small_lr

mlflow: # если не требуется, то просто убираем этот блок
  # exp_name - в таком видео в mlflow будет отображаться эксперимент
  exp_name: ${description.repo}/${description.project_name}/${description.experiment_name}
  url: https://ml.dbrain.io/ # hostname на котором поднят mlflow сервис
  username: ds # логин
  password: EitahsaeghoXooz1Hiev # пароль
  run_id: null #6ab6434ddf2d4db494490053535611ea # ID запуска в эксперименте, нужен если хотите сохранить веса во время
  # конвертации в конкретный эксперимент, если null будет выбран последний по дате создания
tensorboard: # если не требуется, то просто убираем этот блок
  # Папка куда буду складываться логи тензорборда
  log_dir: logs/${description.repo}/${description.project_name}/${description.experiment_name}

logging:
  image:
    height: 640
    width: 640
  log_images_every_n_epoch: 5

data:
  images_folder: /home/addudkin/text_detection/data/det/global_text_detection/all_images
  annotation_folder: /home/addudkin/text_detection/data/det/global_text_detection
  mean: [0.485, 0.456, 0.406]
  std: [0.229, 0.224, 0.225]


train:
  epoch: 1000
  crop_size: [640, 640]
  batch_size: 8
  workers: 12
  pin_memory: True
  gpu_index: 1

checkpoint:
  # Количество отслеживаемых лучших checkpoints для дальнейшего усреднения
  average_top_k: 5

# Имя класса используемого датасета из datasets/__init__.py
dataset_name: TextDetDataset

model:
  class_model: DBNetpp
  backbone:
    type: "ResNet"
    params:
      depth: 50
      num_stages: 4
      out_indices: [0, 1, 2, 3]
      frozen_stages: -1
      norm_cfg:
        type: 'BN'
        requires_grad: True
      norm_eval: False
      style: 'pytorch'
      dcn:
        type: 'DCNv2'
        deform_groups: 1
        fallback_on_stride: False
      init_cfg:
        type: 'Pretrained'
        checkpoint: 'torchvision://resnet50'
        stage_with_dcn: [False, True, True, True]
  neck:
    type: "FPNC"
    params:
      in_channels: [256, 512, 1024, 2048]
      lateral_channels: 256
      asf_cfg:
        attention_type: 'ScaleChannelSpatial'
  head:
    type: DBHead
    params:
      out_channels: 2
      k: 50


loss_function:
  type: DBLoss
  params:
    alpha: 1
    beta: 10
    ohem_ratio: 3

optimizer:
  type: AdamW
  params:
    lr: 9.0e-6
    betas: [ 0.9, 0.999 ]
    weight_decay: 0.0001

scheduler:
  # Имя класса
  type: CosineAnnealingLR
  # Передаваемые параметры
  params:
    T_max: ${train.epoch}
    eta_min: 0


border_creator:
  params:
    shrink_ratio: 0.4
    thresh_min: 0.3
    thresh_max: 0.7

mask_shrinker:
  params:
    shrink_ratio: 0.4
    min_text_size: 8
    shrink_type: 'pyclipper'

post_processor:
  params:
    unclip_ratio: 2.25
    binarization_threshold: 0.3
    confidence_threshold: 0.7
    min_area: 10.


train_transforms:
  RandomCrop:
    height: 640
    width: 640
    p: 1.
